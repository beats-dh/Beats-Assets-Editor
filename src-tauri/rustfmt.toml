# rustfmt.toml

# Edição do Rust usada para parsing/formatting.
# Mantenha "2021" por compatibilidade; atualize para "2024" quando adotarem essa edição.
unstable_features = true
edition = "2021"

# Largura de linha. rustfmt não aceita 0 como "ilimitado".
# Se você quer “sem limite”, use um valor alto. 200 é um bom equilíbrio.
max_width = 200

# Desliga heurísticas que tentam quebrar menos em linhas curtas
# (aproxima a ideia de não quebrar à toa).
use_small_heuristics = "Off"

# Estilo de quebras de linha (equivalente ao seu UseCRLF: false).
newline_style = "Unix"

# Indentação: espaços com largura 4 (equivale ao seu IndentWidth: 4 e UseTab: AlignWithSpaces).
hard_tabs = false
tab_spaces = 4

# Mantém suas importações como você escreveu (equivalente a SortIncludes: Never).
# Em Rust, isso significa não reordenar e não “agrupar/particionar” automaticamente.
reorder_imports = false
imports_granularity = "Preserve"
group_imports = "Preserve"

# Colocação de chaves em controles/funcões: mesma linha (equivalente aos seus AfterFunction/AfterControlStatement: false).
control_brace_style = "AlwaysSameLine"

# Comentários: reflow ligado (equivale ao seu ReflowComments: true).
wrap_comments = true
# Largura para reflow de comentários (se você quer “quase ilimitado”, ponha alto, ou deixe 100–120 se preferir bloco compacto).
comment_width = 200
# Formatar trechos de código dentro de doc comments (útil para manter consistência).
format_code_in_doc_comments = true
# Normalizar atributos de doc (/// vs /** */).
normalize_doc_attributes = true

# Em coleções/chamadas multi-linha, trailing comma ajuda formatação estável.
trailing_comma = "Vertical"

# Outras opções que normalmente preservam legibilidade:
# Evita inserir espaços em ranges (ex.: 0..10), mais próximo do padrão "sem espaços" que você usa em C++.
spaces_around_ranges = false
